#!/bin/bash -ex
# -*- mode:sh; tab-width:4; sh-basic-offset:4; indent-tabs-mode:nil -*-
# vim: softtabstop=4 shiftwidth=4 expandtab

# Since this job is now pulling from ceph-ci.git, there aren't any tags as they
# exist in ceph.git and the Ceph's versioning scheme wants to have them to
# construct the actual version. This doesn't happen when building from ceph.git
git fetch --tags https://github.com/ceph/ceph.git

BRANCH=`branch_slash_filter $BRANCH`
SHA1=${GIT_COMMIT}

# split on '/' to get just 'wip-mybranch' when input is like: origin/wip-mybranch

HOST=$(hostname --short)
echo "Building on ${HOST}"
echo "  DIST=${DIST}"
echo "  BPTAG=${BPTAG}"
echo "  WS=$WORKSPACE"
echo "  PWD=$(pwd)"
echo "  BRANCH=$BRANCH"
echo "  SHA1=$GIT_COMMIT"

if [ -x "$BRANCH" ] ; then
    echo "No git branch was supplied"
    exit 1
fi

echo "Building version $(git describe --abbrev=8) Branch $BRANCH"

rm -rf dist
rm -rf release

# fix version/release.  Hack needed only for the spec
# file for rc candidates.
#export force=force
#sed -i 's/^Version:.*/Version:        0.80/' ceph.spec.in
#sed -i 's/^Release:.*/Release:        rc1%{?dist}/' ceph.spec.in
#sed -i 's/^Source0:.*/Source0:        http:\/\/ceph.com\/download\/%{name}-%{version}-rc1.tar.bz2/' ceph.spec.in
#sed -i 's/^%setup.*/%setup -q -n %{name}-%{version}-rc1/' ceph.spec.in


# run submodule updates regardless
echo "Running submodule update ..."
git submodule update --init --quiet

# When using autotools/autoconf it is possible to see output from `git diff`
# since some macros can be copied over to the ceph source, triggering this
# check. This is why this check now is done just before running autogen.sh
# which calls `aclocal -I m4 --install` that copies a system version of
# ltsugar.m4 that can be different from the one included in the ceph source
# tree.
if git diff --quiet ; then
    echo repository is clean
else
    echo
    echo "**** REPOSITORY IS DIRTY ****"
    echo
    git diff
    if [ "$force" != "force" ]; then
	echo "add 'force' argument if you really want to continue."
	exit 1
    fi
    echo "forcing."
fi

# This is a dev release, enable some debug cmake configs. Note: it has been
# this way since at least 35e1a715. It's difficult to tell when or even if ceph
# was ever properly built with debugging configurations for QA as there are
# corresponding changes in ceph with the switch to cmake which makes this
# challenging to evaluate.
#
# It's likely that it was wrongly assumed that cmake would set the build type
# to Debug because the ".git" directory would be present. This is not the case
# because the "make-dist" script (executed below) creates a git tarball that is
# used for the actual untar/build. See also:
#
# https://github.com/ceph/ceph/pull/53800
#
# Addendum and possibly temporary restriction: only enable these for branches
# ending in "-debug".
if [[ "$BRANCH" == *-debug ]]; then
  CEPH_EXTRA_CMAKE_ARGS+=" -DCMAKE_BUILD_TYPE=Debug -DWITH_CEPH_DEBUG_MUTEX=ON"
  printf 'Added debug cmake configs to branch %s. CEPH_EXTRA_CMAKE_ARGS: %s\n' "$BRANCH" "$CEPH_EXTRA_CMAKE_ARGS"
else
  printf 'No cmake debug options added to branch %s.\n' "$BRANCH"
fi

ceph_build_args_from_flavor ${FLAVOR}

mkdir -p release

# Contents below used to come from /srv/release_tarball.sh and
# was called like::
#
#    $bindir/release_tarball.sh release release/version

releasedir='release'
versionfile='release/version'

cephver=`git describe --abbrev=8 --match "v*" | sed s/^v//`
echo current version $cephver

srcdir=`pwd`

if command -v podman; then
    PODMAN=podman
    PODMAN_STORAGE_DIR="$HOME/.local/share/containers/storage/"
    test -d $PODMAN_STORAGE_DIR && sudo chgrp -R $(groups | cut -d' ' -f1) $PODMAN_STORAGE_DIR
else
    PODMAN="sudo docker"
fi

if [ -d "$releasedir/$cephver" ]; then
    echo "$releasedir/$cephver already exists; reuse that release tarball"
else
    # Create a container image to provide debian-specific utilities, so that this job can run on any container-capable host
    printf "FROM ubuntu:24.04\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev devscripts && apt-get clean && rm -rf /var/lib/apt/lists/*" | $PODMAN build -t ubuntu_builder -
    $PODMAN run --rm -v $PWD:/ceph:z ubuntu_builder:latest bash -c "cd /ceph && dch -v $cephver-1 'autobuilder'"

    # declare an associative array to map file extensions to tar flags
    declare -A compression=( ["bz2"]="j" ["gz"]="z" ["xz"]="J" )
    for cmp in "${!compression[@]}"; do
        rm -f ceph-*.tar.$cmp
    done
    echo building tarball
    ./make-dist $cephver
    for cmp in "${!compression[@]}"; do
      extension="tar.$cmp"
      vers=$(ls ceph-*.$extension | cut -c 6- | sed "s/.$extension//" || true)
      flag="${compression[$cmp]}"
      extract_flags="${flag}xf"
      compress_flags="${flag}cf"
      if [ "$vers" != "" ]; then break; fi
    done
    echo tarball vers $vers

    echo extracting
    mkdir -p $releasedir/$cephver/rpm
    cp rpm/*.patch $releasedir/$cephver/rpm || true
    cd $releasedir/$cephver

    tar $extract_flags $srcdir/ceph-$vers.$extension

    [ "$vers" != "$cephver" ] && mv ceph-$vers ceph-$cephver

    tar zcf ceph_$cephver.orig.tar.gz ceph-$cephver
    cp -a ceph_$cephver.orig.tar.gz ceph-$cephver.tar.gz

    tar jcf ceph-$cephver.tar.bz2 ceph-$cephver

    # copy debian dir, too. Prevent errors with `true` when using cmake
    cp -a $srcdir/debian debian || true
    cd $srcdir

    # copy in spec file, too. If using cmake, the spec file
    # will already exist.
    cp ceph.spec $releasedir/$cephver || true
fi


if [ -n "$versionfile" ]; then
    echo $cephver > $versionfile
    echo "wrote $cephver to $versionfile"
fi

vers=`cat release/version`


(
    cd release/$vers
    mkdir -p ceph-$vers/debian
    cp -r debian/* ceph-$vers/debian/
    $PODMAN run --rm -v $PWD:/ceph:z ubuntu_builder:latest bash -c "cd /ceph && dpkg-source -b ceph-$vers"
)

mkdir -p dist
# Debian Source Files
mv release/$vers/*.dsc dist/.
mv release/$vers/*.diff.gz dist/. || true
mv release/$vers/*.orig.tar.gz dist/.
# RPM Source Files
mkdir -p dist/rpm/
mv release/$vers/rpm/*.patch dist/rpm/ || true
mv release/$vers/ceph.spec dist/.
mv release/$vers/*.tar.* dist/.
# Parameters
mv release/version dist/.


if [ "$DWZ" = false ] ; then
    CEPH_EXTRA_RPMBUILD_ARGS="${CEPH_EXTRA_RPMBUILD_ARGS} --without dwz"
fi

if [ "$SCCACHE" = true ] ; then
    CEPH_EXTRA_RPMBUILD_ARGS="${CEPH_EXTRA_RPMBUILD_ARGS} --with sccache"
fi
write_dist_files
