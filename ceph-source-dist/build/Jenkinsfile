def checkout_ref = ""

pipeline {
  agent {
    label "gigantic&&x86_64"
  }
  stages {
    stage("repository") {
      steps {
        dir("ceph") {
          script {
            if ( env.SHA1 ) {
              checkout_ref = env.SHA1
            } else {
              checkout_ref = env.BRANCH
            }
          }
          checkout scmGit(
            branches: [[name: checkout_ref]],
            userRemoteConfigs: [[
              url: env.CEPH_REPO,
              credentialsId: 'jenkins-build'
            ]],
            extensions: [
              [$class: 'CleanBeforeCheckout'],
              [
                $class: 'CloneOption',
                shallow: true,
                depth:   100,
                timeout: 90
              ],
            ],
          )
          script {
            sh 'git fetch --tags https://github.com/ceph/ceph.git'
          }
        }
      }
    }
    stage("tarball") {
      steps {
        script {
          dir("ceph") {
            def ceph_version_git = sh(
                  script: "git describe --abbrev=8 --match 'v*' | sed s/^v//",
                  returnStdout: true,
            ).trim()
            sh """
              mkdir dist
              echo ${ceph_version_git} > dist/version
              rm -f ceph-*.tar.*
            """
            sh """#!/bin/bash
              ./make-dist ${ceph_version_git}
            """
            sh '''#!/bin/bash -ex
              declare -A compression=( ["bz2"]="j" ["gz"]="z" ["xz"]="J" )
              for cmp in "${!compression[@]}"; do
                extension="tar.$cmp"
                ceph_version_tarball=$(ls ceph-*.$extension | cut -c 6- | sed "s/.$extension//" || true)
                flag="${compression[$cmp]}"
                extract_flags="${flag}xf"
                compress_flags="${flag}cf"
                if [ "$ceph_version_tarball" != "" ]; then break; fi
              done
              echo tarball vers $ceph_version_tarball

              ln ceph.spec dist/
              ln ceph-$ceph_version_tarball.$extension dist/

              echo "SHA1=$(git rev-parse HEAD)" > dist/sha1
              echo "BRANCH=${BRANCH}" > dist/branch

              mv dist ..
            '''
          }
        }
      }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: 'dist/**', fingerprint: true
    }
  }
}
