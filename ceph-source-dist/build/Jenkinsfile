pipeline {
  agent {
    label "gigantic&&!arm64"
  }
  stages {
    stage("repository") {
      steps {
        dir("ceph") {
          script {
            // Rewrite repo + ref if RELEASE_BUILD=true.
            // RELEASE_BUILD is intentionally undefinable as a ceph-source-dist parameter but instead
            // defined by ceph-release-pipeline so that only that job may clone from ceph-releases.git.
            def repoUrl   = params.RELEASE_BUILD ? 'git@github.com:ceph/ceph-releases.git' : env.CEPH_REPO
            def refToCheckout = params.RELEASE_BUILD ? "v${params.VERSION}" : env.BRANCH
            env.CEPH_REPO = repoUrl

            checkout scmGit(
              branches: [[name: refToCheckout]],
              userRemoteConfigs: [[
                url: repoUrl,
                credentialsId: 'e6fe76fe-c6bf-455a-89d5-6e2aae790a28'
                // TODO: set back to jenkins-build
                // credentialsId: 'jenkins-build'
              ]],
              extensions: [
                [$class: 'CleanBeforeCheckout'],
                [
                  $class: 'CloneOption',
                  shallow: true,
                  depth: 100,
                  timeout: 90
                ],
              ],
            )
          }
          script {
            // No need to fetch tags if this is a release build
            if (!params.RELEASE_BUILD?.toBoolean()) {
              sh 'git fetch --tags https://github.com/ceph/ceph.git'
            }
          }
        }
      }
    }
    stage("tarball") {
      steps {
        script {
          dir("ceph") {
            def ceph_version_git = sh(
                  script: "git describe --abbrev=8 --match 'v*' | sed s/^v//",
                  returnStdout: true,
            ).trim()
            sh """
              mkdir dist
              echo ${ceph_version_git} > dist/version
              rm -f ceph-*.tar.*
            """
            sh """#!/bin/bash
              ./make-dist ${ceph_version_git}
            """
            sh '''#!/bin/bash -ex
              declare -A compression=( ["bz2"]="j" ["gz"]="z" ["xz"]="J" )
              for cmp in "${!compression[@]}"; do
                extension="tar.$cmp"
                ceph_version_tarball=$(ls ceph-*.$extension | cut -c 6- | sed "s/.$extension//" || true)
                flag="${compression[$cmp]}"
                extract_flags="${flag}xf"
                compress_flags="${flag}cf"
                if [ "$ceph_version_tarball" != "" ]; then break; fi
              done
              echo tarball vers $ceph_version_tarball
              ## TODO: CMAKE ARGS FROM ceph-setup?
              ln ceph.spec dist/
              ln ceph-$ceph_version_tarball.$extension dist/

              echo "SHA1=$(git rev-parse HEAD)" > dist/sha1

              if [ "${RELEASE_BUILD:-}" = "true" ]; then
                # For security, the following vars are written to dist/other_envvars to be passed
                # to ceph-dev-pipeline instead of via parameters.
                # ceph-dev-pipeline does not offer ceph-releases.git as an option for CEPH_REPO,
                # and we don't want RELEASE_BUILD to be settable by the user to avoid being able
                # clone from ceph-releases.git.
                if [ "${RELEASE_TYPE}" = "PRIVATE" ]; then
                  echo "CEPH_REPO=https://github.com/ceph/ceph-private" > dist/other_envvars
                else
                  echo "CEPH_REPO=https://github.com/ceph/ceph-releases" > dist/other_envvars
                fi
                echo "RELEASE_BUILD=true" >> dist/other_envvars
                echo "chacra_url=https://chacra.ceph.com/" >> dist/other_envvars
                echo "BRANCH=${BRANCH}-release" > dist/branch
              else
                echo "BRANCH=${BRANCH}" > dist/branch
              fi

              mv dist ..
            '''
          }
        }
      }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: 'dist/**', fingerprint: true
    }
  }
}
