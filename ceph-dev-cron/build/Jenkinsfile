node('built-in') {
  def repoUrl  = 'https://github.com/ceph/ceph'
  def branches = ['main','tentacle','squid','reef']

  def cfg = [
      reef: [
          distros: 'jammy focal centos9 windows',
          extras : []
      ],
      squid: [
          distros: 'noble jammy centos9 windows',
          extras : []
      ],
      tentacle: [
          distros: 'noble jammy rocky10 centos9 windows',
          extras : [
          [distros:'centos9 rocky10', flavors:'crimson-debug',   archs:'x86_64']
          ]
      ],
      main: [
          distros: 'noble jammy rocky10 centos9 windows',
          extras : [
          [distros:'centos9 rocky10', flavors:'crimson-debug',   archs:'x86_64'],
          [distros:'centos9 rocky10', flavors:'crimson-release', archs:'x86_64']
          ]
      ]
  ]

  def last = [:]
  def tips = [:]
  def toBuild = []
  def unchanged = []

  try {
    stage('Slurp previous job SHAs') {
      sh 'rm -f last_shas.properties' // ensure no cached copy in job dir
      try {
        copyArtifacts projectName: env.JOB_NAME,
                      selector: lastWithArtifacts(),
                      filter: 'last_shas.properties',
                      optional: true,
                      flatten: true
        if (fileExists('last_shas.properties')) {
          last = readProperties file: 'last_shas.properties'
        } else {
          last = [:]
        }
      } catch (e) {
        echo "No prior cache available: ${e}"
        last = [:]
      }
    }

    stage('Retrieve branch tip SHAs') {
      branches.each { b ->
        def sha = sh(
          script: "git ls-remote ${repoUrl} refs/heads/${b} | awk '{print \$1}'",
          returnStdout: true
        ).trim()
        if (!sha) { error "Could not resolve remote SHA for branch ${b}" }
        tips[b] = sha
        echo "Branch ${b} -> ${sha}"
      }
    }

    stage('Compare SHAs') {
      branches.each { b ->
        def prev = (last.getOrDefault(b, '') ?: '').trim()
        def now  = (tips[b] ?: '').trim()
        if (prev != now) toBuild << b else unchanged << b
      }
      echo "Changed:   ${toBuild}"
      echo "Unchanged: ${unchanged}"
    }

    if (toBuild.isEmpty()) {
      currentBuild.description = "No changes: ${branches.join(', ')}"
      return
    }

    stage('Checkout ceph-build.git') {
      dir('ceph-build') {
        checkout([
          $class: 'GitSCM',
          branches: [[name: '*/cron-pipeline2']],
          userRemoteConfigs: [[url: 'https://github.com/ceph/ceph-build']],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[$class: 'CloneOption', shallow: true, depth: 1, noTags: true, timeout: 20]]
        ])
      }
    }

    stage('Trigger ceph-dev-pipeline') {
      def triggered = []
      toBuild.each { b ->
        def sha = tips[b]
        dir("work/${b}") {
          build job: 'ceph-dev-pipeline',
                parameters: [
                  string(name: 'BRANCH',    value: b),
                  string(name: 'DISTROS',   value: cfg[b].distros),
                  string(name: 'CEPH_REPO', value: repoUrl),
                  string(name: 'SETUP_JOB', value: 'ceph-source-dist'),
                  booleanParam(name: 'FORCE', value: true)
                ],
                wait: false

          cfg[b].extras.each { ex ->
            build job: 'ceph-dev-pipeline',
                  parameters: [
                    string(name: 'BRANCH',    value: b),
                    string(name: 'DISTROS',   value: ex.distros),
                    string(name: 'FLAVORS',   value: ex.flavors),
                    string(name: 'ARCHS',     value: ex.archs),
                    string(name: 'CEPH_REPO', value: repoUrl),
                    string(name: 'SETUP_JOB', value: 'ceph-source-dist'),
                    booleanParam(name: 'FORCE', value: true)
                  ],
                  wait: false
          }

          withCredentials([string(credentialsId: 'shaman-api-key', variable: 'SHAMAN_API_KEY')]) {
            sh """
              bash -c '
              echo "Branch: ${b}"
              echo "SHA: ${sha}"
              echo "Distros: ${cfg[b].distros}"
              BRANCH='${b}'
              SHA1='${sha}'
              source ../../ceph-build/scripts/build_utils.sh
              for d in ${cfg[b].distros}; do
                DIST="\$d"
                get_distro_and_target
                echo "Submitting status for \$d"
                #submit_build_status "POST" queued ceph \$DISTRO \$DIST ""
                update_build_status started ceph
                cat $WORKSPACE/build_status.json
              done
              '
            """
          }
        }
        triggered << "${b}@${sha.take(8)}"
      }

      def skipped = (branches - toBuild)
      currentBuild.description = triggered.isEmpty()
        ? "No changes: ${branches.join(', ')}"
        : "Triggered:<br>- ${triggered.join('<br>- ')}" +
          (skipped ? "<br><br>Unchanged:<br>- ${skipped.join('<br>- ')}" : "")
    }

  } finally {
    if (tips && tips instanceof Map && !tips.isEmpty()) {
      writeFile file: 'last_shas.properties',
               text: tips.collect { k, v -> "${k}=${v}" }.join('\n') + "\n"
      archiveArtifacts artifacts: 'last_shas.properties', fingerprint: true
    }
  }
}