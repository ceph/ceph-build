---

- hosts: all
  sudo: true
  user: ubuntu
  vars:
   - jenkins_user: 'jenkins-build'
   # jenkins API credentials:
   - api_user: 'ceph-jenkins'
   - token: '{{ token }}'
   - api_uri: 'https://jenkins.ceph.com'
   - nodename: '{{ nodename }}'
   - labels: '{{ labels }}'

  tasks:
    - name: create a {{ jenkins_user }} user
      user: name={{ jenkins_user }} comment="Jenkins Build Slave User"

    - name: ensure the user dir is tied to the jenkins_user
      file: path=/home/{{ jenkins_user }}/ state=directory owner={{ jenkins_user }} recurse=yes

    - name: Create .ssh directory
      file: path=/home/{{ jenkins_user }}/.ssh
            state=directory

    - name: set the authorized keys
      authorized_key: user={{ jenkins_user }} key="{{ lookup('file', 'playbook/files/ssh/keys/jenkins_build.pub') }}"

    - name: ensure {{ jenkins_user }} can sudo without a prompt
      sudo: yes
      lineinfile:
        dest: /etc/sudoers
        regexp: '^{{ jenkins_user }} ALL'
        line: '{{ jenkins_user }}   ALL=(ALL:ALL) NOPASSWD:ALL'
        validate: 'visudo -cf %s'

    - name: ensure the build dir exists
      file: path=/home/{{ jenkins_user }}/build state=directory owner={{ jenkins_user }}

    - name: Install RPM requirements
      sudo: yes
      yum: name={{ item }} state=present
      with_items:
        - createrepo
        - epel-release
        - java-1.7.0-openjdk
        - git
        - python-pip
        - python-virtualenv
        - libtool
        #- rpm-sign
        - autoconf
        - redhat-lsb-core
        - automake
        - binutils
        - bison
        - flex
        - gcc
        - gcc-c++
        - gettext
        - libtool
        - make
        - patch
        - pkgconfig
        - redhat-rpm-config
        - rpm-build
        - rpmdevtools
        - openssl-devel
        - libffi-devel
      when: ansible_pkg_mgr  == "yum"

    # Run the equivalent of "apt-get update" as a separate step
    - apt: update_cache=yes
      when: ansible_pkg_mgr  == "apt"

    - name: Install DEB requirements
      sudo: yes
      apt: name={{ item }} state=present
      with_items:
        - git
        - fakeroot
        - fakeroot-ng
        - debhelper
        - reprepro
        - dchroot
        - devscripts
        - pbuilder
        - pkg-config
        - python-dev
        - python-pip
        - python-virtualenv
        - libtool
        - autotools-dev
        - automake
        - debian-archive-keyring
        # jenkins-job-builder job:
        - libyaml-dev
        # ceph-docs job:
        - doxygen
        - ditaa
        - ant
        # teuthology-docs job:
        - libmysqlclient-dev
        - libevent-dev
        - libffi-dev
        - libssl-dev
      when: ansible_pkg_mgr  == "apt"

    - name: Add the Debian Jessie Key
      sudo: yes
      when: ansible_pkg_mgr  == "apt"
      apt_key: id=2B90D010 url=https://ftp-master.debian.org/keys/archive-key-8.asc keyring=/etc/apt/trusted.gpg.d/jessie.gpg state=present

    - name: Install openjdk-7-jre
      apt: name=openjdk-7-jre state=present
      when:
        ansible_distribution_release in ['precise', 'trusty', 'wheezy', 'jessie']

    - name: Install default openjdk for Xenial only
      apt: name={{ item }} state=present
      with_items:
        - default-jdk
        - default-jre
      when:
        ansible_distribution_release == 'xenial'

    - name: correct java version selected
      alternatives: name=java path=/usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java
      when:
        (ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'precise') or
        (ansible_distribution == 'Debian' and ansible_distribution_release == 'wheezy')

    - name: ensure the rpmmacros file exists to fix centos builds
      file: path="/home/{{ jenkins_user }}/.rpmmacros" owner="{{ jenkins_user }}" state=touch

    - name: write the rpmmacros needed in centos
      lineinfile:
        dest: "/home/{{ jenkins_user }}/.rpmmacros"
        regexp: '^%dist'
        line: '%dist .el{{ ansible_distribution_major_version }}'
      when: ansible_pkg_mgr  == "yum"

    - name: ensure that the current host is in /etc/hosts. Yes this is a thing.
      sudo: true
      replace:
        backup: yes
        dest: /etc/hosts
        regexp: '^(127\.0\.1\.1(?!.*\b{{ ansible_hostname }}\b).*)$'
        replace: '\1 {{ ansible_hostname }}'

    - name: install six, latest one
      sudo: true
      pip: name=six state=latest

    - name: install python-jenkins
      sudo: true
      # https://bugs.launchpad.net/python-jenkins/+bug/1500898
      pip: name=python-jenkins version=0.4.7

    - name: add github.com host key
      sudo: true
      known_hosts:
        path: '/etc/ssh/ssh_known_hosts'
        # we need to use 'host' here because prado currently uses ansible-playbook==1.9.1
        host: 'github.com'
        # github.com.pub is the output of `ssh-keyscan github.com`
        key: "{{ lookup('file', 'playbook/files/ssh/hostkeys/github.com.pub') }}"

    - name: register the new slave to jenkins master
      jenkins-node:
        username: "{{ api_user }}"
        uri: "{{ api_uri }}"
        password: "{{ token }}"
        # relies on a convention to set a unique name that allows a reverse
        # mapping from Jenkins back to whatever service created the current
        # node
        name: "{{ ansible_default_ipv4.address }}+{{ nodename }}"
        labels: "{{ labels }}"
        host: "{{ ansible_default_ipv4.address }}"
        credentialsId: '39fa150b-b2a1-416e-b334-29a9a2c0b32d'
        remoteFS: '/home/{{ jenkins_user }}/build'
        # XXX this should be configurable, not all nodes should have one executor
        executors: 1
        exclusive: true
