#!/bin/bash

set -e

# the following two methods exist in scripts/build_utils.sh
# shellcheck disable=SC2034
pkgs=( "ansible-lint" )
# force virtualenv to be created earlier for this occurence, so we are not stuck because of ansible-lint dependencie,
# which would enforce latest ansible version to be installed.
virtualenv $TEMPVENV
"$VENV"/pip install -r <(grep ansible "$WORKSPACE"/ceph-ansible/tests/requirements.txt)
install_python_packages "pkgs[@]"


#############
# FUNCTIONS #
#############
function syntax_check {
  "$VENV"/ansible-playbook -i '127.0.0.1,' site.yml.sample --syntax-check --list-tasks -vv
  "$VENV"/ansible-playbook -i '127.0.0.1,' site-docker.yml.sample --syntax-check --list-tasks -vv

  # move roles and group_vars into the
  # infrastructure-playbooks directory for easier syntax checking
  cp -r roles infrastructure-playbooks/
  cp -r group_vars infrastructure-playbooks/
  mv infrastructure-playbooks/group_vars/all.yml.sample infrastructure-playbooks/group_vars/all.yml
  export ANSIBLE_LIBRARY=$WORKSPACE/ceph-ansible/library

  "$VENV"/ansible-playbook -i '127.0.0.1,' infrastructure-playbooks/*.yml --syntax-check --list-tasks -vv
}

function ansible_lint {
  "$VENV"/ansible-lint site.yml.sample
  "$VENV"/ansible-lint site-docker.yml.sample
}

function group_vars_check {
  match_file "/defaults/main.yml"
  nb=$(match_file "/defaults/main.yml" | wc -l)
  if [[ "$nb" -eq 0 ]]; then
    echo "group_vars has not been touched."
    return 0
  fi

  match_file "group_vars/"
  nb_group_vars=$(match_file "group_vars/" | wc -l)
  if [[ "$nb" -gt "$nb_group_vars" ]]; then
    echo "One or more files containing default variables has/have been modified."
    echo "You must run 'generate_group_vars_sample.sh' to generate the group_vars template files."
    return 1
  fi
}

function git_diff_to_head {
  # shellcheck disable=SC2154
  # ghprbTargetBranch variable comes from jenkins's injectedEnvVars
  git diff --diff-filter=MT --no-color origin/"${ghprbTargetBranch}"..HEAD
}

function match_file {
  git_diff_to_head | sed -n "s|^+++.*\\($1.*\\)|\\1|p"
}

function test_sign_off {
  test "$(git log --oneline --no-merges origin/"${ghprbTargetBranch}"..HEAD | wc -l)" -ge "$(git log --no-merges origin/"${ghprbTargetBranch}"..HEAD | grep -c Signed-off-by)" && echo "One or more commits is/are missing a Signed-off-by. Add it with 'git commit -s'." && return 1

  # if we arrive here the test command successed and we can return 0
  echo "Sign-off ok!" && return 0
}

function test_ceph_release_in_ceph_default {
  if match_file "roles/ceph-defaults/" | grep -E '^[<>+].*- ceph_release_num\[ceph_release\]'; then
    echo "Do not use statements like '- ceph_release_num[ceph_release]' in ceph-defaults role!"
    echo "'ceph_release' is only populated **after** the play of ceph-defaults, typically in ceph-common or ceph-docker-common."
    return 1
  fi
  echo "No '- ceph_release_num[ceph_release]' statements found in ceph-defaults role!" && return 0
}


########
# MAIN #
########
cd "$WORKSPACE"/ceph-ansible
syntax_check
#ansible_lint
git fetch origin
group_vars_check
test_sign_off
test_ceph_release_in_ceph_default
