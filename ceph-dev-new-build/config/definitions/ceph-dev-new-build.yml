- job:
    name: ceph-dev-new-build
    node: built-in
    project-type: matrix
    defaults: global
    display-name: 'ceph-dev-new-build'
    block-downstream: false
    block-upstream: false
    concurrent: true
    properties:
      - github:
          url: https://github.com/ceph/ceph-ci
      - build-discarder:
          days-to-keep: 30
          artifact-days-to-keep: 30

    execution-strategy:
       combination-filter: |
         DIST == AVAILABLE_DIST && ARCH == AVAILABLE_ARCH &&
         (ARCH == "x86_64" || (ARCH == "arm64" && ["xenial", "bionic", "centos7", "centos8", "centos9"].contains(DIST)))
    axes:
      - axis:
          type: label-expression
          name: MACHINE_SIZE
          values:
            - gigantic
      - axis:
          type: label-expression
          name: AVAILABLE_ARCH
          values:
            - x86_64
            - arm64
      - axis:
          type: label-expression
          name: AVAILABLE_DIST
          values:
            - trusty
            - xenial
            - bionic
            - focal
            - jammy
            - jessie
            - precise
            - centos6
            - centos7
            - centos8
            - centos9
            - leap15
            - windows
      - axis:
          type: dynamic
          name: DIST
          values:
            - DISTROS
      - axis:
          type: dynamic
          name: ARCH
          values:
            - ARCHS



    builders:
      - shell: |
          echo "Cleaning up top-level workarea (shared among workspaces)"
          ls -la
          sudo rm -rf dist
          rm -rf venv
          sudo rm -rf release
      - copyartifact:
          project: ceph-dev-new-setup
          filter: 'dist/**'
          which-build: multijob-build
      - inject:
          properties-file: ${WORKSPACE}/dist/sha1
      - inject:
          properties-file: ${WORKSPACE}/dist/branch
      - inject:
          properties-file: ${WORKSPACE}/dist/other_envvars
      # debian build scripts
      - shell:
          !include-raw:
            - ../../build/validate_deb
            - ../../../scripts/build_utils.sh
            - ../../build/setup_deb
            - ../../build/setup_pbuilder
            - ../../build/build_deb
            - ../../../scripts/status_completed
      # rpm build scripts
      - shell:
          !include-raw:
            - ../../build/validate_rpm
            - ../../../scripts/build_utils.sh
            - ../../../scripts/setup_sccache.sh
            - ../../build/setup_rpm
            - ../../build/build_rpm
            - ../../../scripts/status_completed
      # osc build scripts
      - shell:
          !include-raw:
            - ../../build/validate_osc
            - ../../../scripts/build_utils.sh
            - ../../build/setup_osc
            - ../../build/build_osc
            - ../../../scripts/status_completed
      # mingw build scripts (targeting Windows)
      - shell:
          !include-raw:
            - ../../build/validate_mingw
            - ../../../scripts/build_utils.sh
            - ../../build/setup_mingw
            - ../../build/build_mingw
            - ../../../scripts/status_completed

    publishers:
      - postbuildscript:
          builders:
            - role: SLAVE
              build-on:
                  - FAILURE
                  - ABORTED
              build-steps:
                - inject:
                    properties-file: ${WORKSPACE}/build_info
                - shell:
                    !include-raw:
                      - ../../../scripts/build_utils.sh
                      - ../../build/failure

    wrappers:
      - inject-passwords:
          global: true
          mask-password-params: true
      - credentials-binding:
          - text:
              credential-id: chacractl-key
              variable: CHACRACTL_KEY
          - text:
              credential-id: shaman-api-key
              variable: SHAMAN_API_KEY
          - username-password-separated:
              credential-id: quay-ceph-io-ceph-ci
              username: CONTAINER_REPO_USERNAME
              password: CONTAINER_REPO_PASSWORD
          - username-password-separated:
              credential-id: dgalloway-docker-hub
              username: DOCKER_HUB_USERNAME
              password: DOCKER_HUB_PASSWORD
          - username-password-separated:
              credential-id: ibm-cloud-sccache-bucket
              username: AWS_ACCESS_KEY_ID
              password: AWS_SECRET_ACCESS_KEY
      - build-name:
          name: "#${BUILD_NUMBER} ${BRANCH}, ${SHA1}, ${DISTROS}, ${FLAVOR}"
