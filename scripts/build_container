#!/bin/bash
# vim: ts=4 sw=4 expandtab
set -ex
PS4="\$(date --rfc-3339=seconds) + "

# XXX perhaps use job parameters instead of literals; then
# later stages can also use them to compare etc.
# build container image that supports building crimson-osd
if [[ $CI_CONTAINER == "true" && $DISTRO == "centos" && "$RELEASE" =~ 8|9 ]] ; then
    podman login -u $CONTAINER_REPO_USERNAME -p $CONTAINER_REPO_PASSWORD $CONTAINER_REPO_HOSTNAME/$CONTAINER_REPO_ORGANIZATION
    loop=0
    ready=false
    while ((loop < 15)); do
      curl -s "https://shaman.ceph.com/api/search/?project=ceph&distros=centos/${RELEASE}/${ARCH}&sha1=${SHA1}&ref=${BRANCH}&flavor=${FLAVOR}" > shaman.status
      if [[ ($(jq -r '.[0].status' < shaman.status) == 'ready') ]]; then
        # If we skipped compilation, we will not have generated a shaman build,
        # so skip validating against extra.build_url
        if [[ ${CI_COMPILE:-true} == "false" ]]; then
          ready=true
          break
        elif [[ ($(jq -r '.[0].extra.build_url' < shaman.status) == ${BUILD_URL}) ]]; then
          ready=true
          break
        fi
      fi
      ((loop = loop + 1))
      sleep 60
    done

    if [[ "$ready" == "false" ]] ; then
      chacra_endpoint="ceph/${BRANCH}/${SHA1}/${DISTRO}/${RELEASE}"
      echo "FAIL: timed out waiting for shaman repo to be built:  https://shaman.ceph.com/api/repos/${chacra_endpoint}/flavors/${FLAVOR}/"
      # don't fail the build here on purpose
      # update_build_status "failed" "ceph" $NORMAL_DISTRO $NORMAL_DISTRO_VERSION $NORMAL_ARCH
      # exit 1
    fi
    cd ${WORKSPACE}
    # older jobs used a versioned directory; ceph-dev-pipeline uses an unversioned dir.
    [[ -d ./dist/ceph/container ]] && cd ./dist/ceph/container || cd dist/ceph-${cephver}/container
    from_image_spec="${DISTRO}:${RELEASE}"
    case "${from_image_spec}" in
        "centos:stream9")  FROM_IMAGE=quay.io/centos/centos:stream9 ;;
        "rocky:10") FROM_IMAGE=docker.io/rockylinux/rockylinux:10 ;;
        *) echo "Don't know requested FROM image ${from_image_spec}; exit 1 ;;
    esac
    FROM_IMAGE=${FROM_IMAGE} CEPH_SHA1=${SHA1} ./build.sh
fi
