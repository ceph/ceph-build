#!/usr/bin/env bash

#
# This script uses Jenkins Job Builder to generate the configuration for its own
# job so that it automatically configures all other jobs that have their YAML
# definitions.
#

set -euxo pipefail

# the jjb version is an unreleased patch from dmick to add support for 'ancestry' build choosers
# for ceph-dev-new-trigger, to allow it to be configured to only look at branches up to N days
# old.  This is just arguably better, but also useful when jenkins (or that plugin) decides it
# needs to build every branch.
#
# when jenkins-job-builder 6.5 or later is released, this requirement should change to
# jenkins-job-builder>=6.5

pkgs=( "dataclasses" "jenkins-job-builder>=6.4.3" )
TEMPVENV=$(create_venv_dir)
VENV=${TEMPVENV}/bin
install_python_packages $TEMPVENV "pkgs[@]" latest

# Wipe out JJB's cache if $FORCE is set.
[ "$FORCE" = true ] && rm -rf "$HOME/.cache/jenkins_jobs/"

# Each jenkins controller will write its own config file when the
# jenkins-job-builder gets run
JENKINS_FQDN=$(echo $JENKINS_URL | awk -F/ '{print $3}')
JJB_CONFIG="$HOME/.jenkins_jobs.$JENKINS_FQDN.ini"

# slap the programatically computed JJB config using env vars from Jenkins
cat > $JJB_CONFIG << EOF
[jenkins]
user=$JOB_BUILDER_USER
password=$JOB_BUILDER_PASS
url=$JENKINS_URL
EOF

# Make a temp dir to store job configs created using `jenkins-jobs test`
TEMPDIR=$(mktemp -d)

# Test every definition if available in the current repository and update the jobs
# if they do define one (they should always define their definitions)
for dir in `find . -maxdepth 1 -path ./.git -prune -o -type d -print`; do
    definitions_dir="$dir/config/definitions"
    if [ -d "$definitions_dir" ]; then
        echo "found definitions directory: $definitions_dir"

        # Set with JJB config file we should use based on if an override
        # file is present in the job's config dir
        if [ -f "$dir/config/JENKINS_URL" ]; then
            JENKINS_URL_OVERRIDE=$(cat $dir/config/JENKINS_URL)
            echo "found JENKINS_URL override file.  using $JENKINS_URL_OVERRIDE"
            JJB_CONFIG="$HOME/.jenkins_jobs.$JENKINS_URL_OVERRIDE.ini"
        else
            JJB_CONFIG="$HOME/.jenkins_jobs.jenkins.ceph.com.ini"
        fi

        # Each jenkins-job-builder job should only update the controller
        # that started it.  This prevents collisions.
        if [[ "$JJB_CONFIG" == "$HOME/.jenkins_jobs.$JENKINS_FQDN.ini" ]]; then
            # Test the definitions first
            $VENV/jenkins-jobs --log_level DEBUG --conf $JJB_CONFIG test $definitions_dir -o $TEMPDIR

            # Update Jenkins with the output if they passed the test phase
            # Note that this needs proper permissions with the right credentials to the
            # correct Jenkins instance.
            $VENV/jenkins-jobs --log_level DEBUG --conf $JJB_CONFIG update $definitions_dir
        fi
    fi
done

# Set JJB_CONFIG back to the one our controller wrote so the var can be used in the deletion task below
JJB_CONFIG="$HOME/.jenkins_jobs.$JENKINS_FQDN.ini"

# Delete jobs our controller has that didn't get job xml written during `jenkins-jobs test`
# jenkins-job-builder doesn't get a config written so we `grep -v it` so it doesn't get deleted.
# Jobs that start with 'preserve-' will also be kept, as it's assumed they're jobs under
# development that will be deleted (perhaps renamed) once development is finished.
for JOB in $(curl -s https://$JENKINS_FQDN/api/json | jq -r '.jobs[].name' | egrep -v 'jenkins-job-builder|^preserve-' | sort); do
    if [ ! -f $TEMPDIR/$JOB ]; then
        echo "Did not find job definition for $JOB.  Deleting!"
        $VENV/jenkins-jobs --log_level DEBUG --conf $JJB_CONFIG delete $JOB
    fi
done
