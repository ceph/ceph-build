#!/bin/bash
# This job:
# - Reimages testnodes using Cobbler (which runs ceph-cm-ansible)
# - Preps the testnodes to have a FOG image captured (ceph-cm-ansible/tools/prep-fog-capture.yml)
# - Captures FOG images
#
# CAPITAL vars are provided by Jenkins.  lowercase are just in this script

set -ex

if ! grep -s 'User.*ubuntu' ~/.ssh/config >/dev/null 2>&1  ; then
  echo << EOF
ERROR: The jenkins-build user on host teuthology does not have "User
ubuntu" in .ssh/config.  This will make teuthology connections,
and thus this job, fail.  Please add that configuration to
/home/jenkins-build/.ssh/config on teuthology.
EOF
  exit 1
fi

# Converts distro friendly names into Cobbler/FOG image names
funSetProfiles () {
  splitdistro=$(echo $1 | cut -d '_' -f1)
  distroversion=$(echo $1 | cut -d '_' -f2)
  if [ "$splitdistro" == "ubuntu" ]; then
    cobblerprofile="Ubuntu-$distroversion-server-x86_64"
    fogprofile="ubuntu_$distroversion"
  elif [ "$splitdistro" == "rhel" ]; then
    cobblerprofile="RHEL-$distroversion-Server-x86_64"
    fogprofile="rhel_$distroversion"
  elif [ "$splitdistro" == "centos" ]; then
    cobblerprofile="CentOS-$distroversion-x86_64"
    fogprofile="centos_$distroversion"
  elif [ "$splitdistro" == "opensuse" ]; then
    cobblerprofile="openSUSE-$distroversion-x86_64"
    fogprofile="opensuse_$distroversion"
  else
    echo "Unknown profile $1"
    exit 1
  fi
}

funPowerCycle () {
  host=$(echo ${1} | cut -d '.' -f1)
  powerstatus=$(ipmitool -I lanplus -U inktank -P $SEPIA_IPMI_PASS -H ${host}.ipmi.sepia.ceph.com chassis power status | cut -d ' ' -f4-)
  if [ "$powerstatus" == "off" ]; then
     ipmitool -I lanplus -U inktank -P $SEPIA_IPMI_PASS -H ${host}.ipmi.sepia.ceph.com chassis power on
  else
     ipmitool -I lanplus -U inktank -P $SEPIA_IPMI_PASS -H ${host}.ipmi.sepia.ceph.com chassis power cycle
  fi
}

# There's a few loops that could hang indefinitely if a curl command fails.
# This function takes two arguments: Current and Max number of retries.
# It will fail the job if Current > Max retries.
funRetry () {
  if [ $1 -gt $2 ]; then
    echo "Maximum retries exceeded.  Failing job."
    exit 1
  fi
}

# Clone or update teuthology
if [ ! -d teuthology ]; then
  git clone https://github.com/ceph/teuthology
  cd teuthology
  git checkout $TEUTHOLOGYBRANCH
else
  cd teuthology
  git fetch
  git checkout main
  git pull
  git checkout $TEUTHOLOGYBRANCH
fi

# Should we use teuthology-lock to lock systems?
if [ "$DEFINEDHOSTS" == "" ]; then
  use_teuthologylock=true
else
  use_teuthologylock=false
fi

# once this bootstrap was conditional on use_teuthologylock,
# but we also want teuthology-queue, even if we're not using
# teuthology-lock
# Bootstrap teuthology
./bootstrap
cd $WORKSPACE
source $WORKSPACE/teuthology/virtualenv/bin/activate

# Clone or update ceph-cm-ansible
if [ ! -d ceph-cm-ansible ]; then
  git clone https://github.com/ceph/ceph-cm-ansible
  cd ceph-cm-ansible
  git checkout $CMANSIBLEBRANCH
else
  cd ceph-cm-ansible
  git fetch
  git checkout main
  git pull
  git checkout $CMANSIBLEBRANCH
fi

cd $WORKSPACE

if [ "$use_teuthologylock" = true ]; then
  # Don't bail if we fail to lock machines
  set +e

  numdistros=$(echo $DISTROS | wc -w)
  # Keep trying to lock machines
  for type in $MACHINETYPES; do
    numlocked=$(teuthology-lock --brief --machine-type $type | grep "Locked to capture FOG image for Jenkins build $BUILD_NUMBER" | wc -l)
    currentretries=0
    while [ $numlocked -lt $numdistros ]; do
      # Lock one at a time since we have a better shot of getting one instead of all at once.
      # Setting the BUILD_NUMBER in the description makes sure each Jenkins job uses the right machines.
      # This is useful for when a job is aborted and another is started while the previous job's machines are debugged/cleaned up.
      teuthology-lock --lock-many 1 --machine-type $type --desc "Locked to capture FOG image for Jenkins build $BUILD_NUMBER"
      # Sleep for a bit so we don't hammer the lock server
      if [ $? -ne 0 ]; then
        sleep 5
      fi
      numlocked=$(teuthology-lock --brief --machine-type $type | grep "Locked to capture FOG image for Jenkins build $BUILD_NUMBER" | wc -l)
      ((++currentretries))
      # Retry for 1hr
      funRetry $currentretries 720
    done
  done

  set -e

  allhosts=$(teuthology-lock --brief | grep "Locked to capture FOG image for Jenkins build $BUILD_NUMBER" | cut -d '.' -f1 | tr "\n" " ")
else
  allhosts="$DEFINEDHOSTS"
  set -e
fi

# Configure DHCP to use cobbler as the PXE server for each machine to reimage and ansiblize
for machine in $allhosts; do
  ssh ubuntu@store01.front.sepia.ceph.com "sudo /usr/local/sbin/set-next-server.sh $machine cobbler"
done

# Restart dhcpd (for some reason doing this every time we set the next-server in the for loop above, dhcpd would fail to start)
ssh ubuntu@store01.front.sepia.ceph.com "sudo service dhcpd restart"

# Get FOG 'Capture' TaskID
fogcaptureid=$(curl -f -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/tasktype -d '{"name": "Capture"}' -X GET | jq -r '.tasktypes[0].id')

# Set cobbler profile and FOG image ID for each locked machine
for type in $MACHINETYPES; do
  if [ "$use_teuthologylock" = true ]; then
    lockedhosts=$(teuthology-lock --brief --machine-type $type | grep "Locked to capture FOG image for Jenkins build $BUILD_NUMBER" | cut -d '.' -f1 | sort)
  else
    lockedhosts=$(echo $DEFINEDHOSTS | grep -o "\w*${type}\w*")
  fi
  # Create arrays using our lists so we can iterate through them
  array1=($lockedhosts)
  array2=($DISTROS)
  for i in $(seq 1 $numdistros); do
    funSetProfiles ${array2[$i-1]}
    ssh ubuntu@cobbler.front.sepia.ceph.com "sudo cobbler system edit --name ${array1[$i-1]} --profile $cobblerprofile --netboot-enabled=1"
    funPowerCycle ${array1[$i-1]}
    # Get FOG host ID
    foghostid=$(curl -f -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/host -d '{"name": "'${array1[$i-1]}'"}' -X GET | jq -r '.hosts[0].id')
    # Get FOG image ID
    fogimageid=$(curl -f -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/image -d '{"name": "'${type}_${fogprofile}'"}' -X GET | jq -r '.images[0].id')
    # Check if FOG image ID got set and create the image template if it's not set
    if [ "$fogimageid" == "null" ]; then
      curl -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/image/ -d '{ "imageTypeID": "1", "imagePartitionTypeID": "1", "name": "'${type}_${fogprofile}'", "path": "'${type}_${fogprofile}'", "osID": "50", "format": "0", "magnet": "", "protected": "0", "compress": "6", "isEnabled": "1", "toReplicate": "1", "os": {"id": "50", "name": "Linux", "description": ""}, "imagepartitiontype": {"id": "1", "name": "Everything", "type": "all"}, "imagetype": {"id": "1", "name": "Single Disk - Resizable", "type": "n"}, "imagetypename": "Single Disk - Resizable", "imageparttypename": "Everything", "osname": "Linux", "storagegroupname": "default"}' -X POST
      fogimageid=$(curl -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/image -d '{"name": "'${type}_${fogprofile}'"}' -X GET | jq -r '.images[0].id')
    fi
    # Set foghostid (target host) to capture fogimageid
    curl -f -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/host/$foghostid -d '{"imageID": "'${fogimageid}'"}' -X PUT
    # Create 'Capture' task for each machine
    curl -f -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/host/$foghostid/task -d '{"taskTypeID": "'${fogcaptureid}'"}' -X POST
  done
done

# Sleep for 10sec to allow the hosts to reboot (Makes sure we don't `stat` existing/old /ceph-qa-ready
sleep 10

# Don't bail if machines aren't ready yet
set +e

# Set DHCP next-server back to FOG and prep each machine for FOG capturing
remaininghosts=$allhosts
# Once all the hostnames are removed from $remaininghosts, trailing spaces are all that's left.
# I'm sure there's a cleaner way to compile the list of hostnames above.  PRs welcome.
currentretries=0
while [[ $(echo $remaininghosts | wc -w) != 0 ]]; do
  for host in $remaininghosts; do
    if ssh -q ubuntu@${host}.front.sepia.ceph.com stat /ceph-qa-ready \> /dev/null 2\>\&1; then
      # Bail if anything fails
      set -ex
      # Set DHCP back
      ssh ubuntu@store01.front.sepia.ceph.com "sudo /usr/local/sbin/set-next-server.sh $host fog"
      # Prep the host for FOG image capture
      # set ANSIBLE_CONFIG to allow teuthology to specify collections dir
      ANSIBLE_CONFIG=$WORKSPACE/teuthology/ansible.cfg ansible-playbook $WORKSPACE/ceph-cm-ansible/tools/prep-fog-capture.yml -e ansible_ssh_user=ubuntu --limit="$host*"
      remaininghosts=${remaininghosts//$host/}
    else
      # This gets noisy
      set +ex
      echo "$(date) -- $host is not ready.  Sleeping for 2min"
      sleep 120
      ((++currentretries))
      # Retry for 2h
      funRetry $currentretries 60
    fi
  done
done

set -ex

# Restart dhcpd so servers PXE boot to FOG server
ssh ubuntu@store01.front.sepia.ceph.com "sudo service dhcpd restart"

# Only pause the queue if needed
if [ "$PAUSEQUEUE" == "true" ]; then
  # Get FOG 'Deploy' TaskID
  fogdeployid=$(curl -f -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/tasktype -d '{"name": "Deploy"}' -X GET | jq -r '.tasktypes[0].id')

  # Check for scheduled deploy tasks
  deploytasks=$(curl -f -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/task/active -d '{"typeID": "'${fogdeployid}'"}' -X GET | jq -r '.count')

  # If there are scheduled or active deploy tasks, pause the queue and let them finish.
  # Capturing a new OS image can interrupt active OS deployments.
  if [ $deploytasks -gt 0 ]; then
    for type in $MACHINETYPES; do
      # Only pause the queue for 1hr just in case anything goes wrong with the Jenkins job.
      teuthology-queue --pause 3600 --machine_type $type
    done
    pausedqueue=true
    currentretries=0
    while [ $deploytasks -gt 0 ]; do
      echo "$(date) -- $deploytasks FOG deploy tasks still queued.  Sleeping 10sec"
      sleep 10
      deploytasks=$(curl -f -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/task/active -d '{"typeID": "'${fogdeployid}'", "imageID": "'${fogimageid}'"}' -X GET | jq -r '.count')
      ((++currentretries))
      # Retry for 1hr
      funRetry $currentretries 360
    done
  fi
else
  pausedqueue=false
fi

# Reboot all hosts so FOG can capture their OSes
for host in $allhosts; do
  funPowerCycle $host
done

# Wait for Capture tasks to finish
capturetasks=$(curl -f -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/task/active -d '{"typeID": "'${fogcaptureid}'"}' -X GET | jq -r '.count')
currentretries=0
while [ $capturetasks -gt 0 ]; do
  echo "$(date) -- $capturetasks FOG capture tasks still queued.  Sleeping 10sec"
  sleep 10
  capturetasks=$(curl -f -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/task/active -d '{"typeID": "'${fogcaptureid}'"}' -X GET | jq -r '.count')
    ((++currentretries))
    # Retry for 30min
    funRetry $currentretries 180
done

# Unpause the queue if we paused it earlier
if [ "$pausedqueue" = true ]; then
  for type in $MACHINETYPES; do
    teuthology-queue --pause 0 --machine_type $type
  done
fi

if [ "$use_teuthologylock" = true ]; then
  # Unlock all machines after all capture images are finished
  for host in $allhosts; do
    teuthology-lock --unlock $host
  done
else
  deactivate
  rm -rf $WORKSPACE/venv
fi
