#!/usr/bin/env bash
set -o errexit
set -o pipefail

if [[ -z $SSH_PRIVATE_KEY ]]; then
    echo "ERROR: The SSH private key secret is not set"
    exit 1
fi

WINDOWS_SERVER_2019_ISO_URL=${WINDOWS_SERVER_2019_ISO_URL:-"https://software-download.microsoft.com/download/pr/17763.737.190906-2324.rs5_release_svc_refresh_SERVER_EVAL_x64FRE_en-us_1.iso"}
VIRTIO_WIN_ISO_URL=${VIRTIO_WIN_ISO_URL:-"https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso"}

BUILD_DIR="$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)"

source ${BUILD_DIR}/../../scripts/build_utils.sh


function restart_windows_vm() {
    echo "Restarting Windows VM"
    ssh_exec "shutdown.exe /r /t 0 & sc.exe stop sshd"
    SECONDS=0
    TIMEOUT=${1:-600}
    while true; do
        if [[ $SECONDS -gt $TIMEOUT ]]; then
            echo "Timeout waiting for the VM to start"
            exit 1
        fi
        ssh_exec hostname || {
            echo "Cannot execute SSH commands yet"
            sleep 10
            continue
        }
        break
    done
    echo "Windows VM restarted"
}


if ! which virt-install >/dev/null; then
    sudo apt-get update -o Acquire::Languages=none -o Acquire::Translation=none || true
    sudo apt-get install -y virtinst
fi
if ! which xmllint >/dev/null; then
    sudo apt-get update -o Acquire::Languages=none -o Acquire::Translation=none || true
    sudo apt-get install -y libxml2-utils
fi
if ! which jq >/dev/null; then
    sudo apt-get update -o Acquire::Languages=none -o Acquire::Translation=none || true
    sudo apt-get install -y jq
fi

if ! sudo virsh net-info default &>/dev/null; then
    cat << EOF > $WORKSPACE/default-net.xml
<network>
  <name>default</name>
  <bridge name="virbr0"/>
  <forward mode="nat"/>
  <ip address="192.168.122.1" netmask="255.255.255.0">
    <dhcp>
      <range start="192.168.122.2" end="192.168.122.254"/>
    </dhcp>
  </ip>
</network>
EOF
    sudo virsh net-define $WORKSPACE/default-net.xml
    sudo virsh net-start default
    sudo virsh net-autostart default
    rm $WORKSPACE/default-net.xml
fi

echo "Downloading virtio-win ISO"
retrycmd_if_failure 5 0 30m curl -C - -L $VIRTIO_WIN_ISO_URL -o ${BUILD_DIR}/virtio-win.iso

echo "Downloading Windows Server 2019 ISO"
retrycmd_if_failure 5 0 60m curl -C - -L $WINDOWS_SERVER_2019_ISO_URL -o ${BUILD_DIR}/windows-server-2019.iso

echo "Creating floppy image"
qemu-img create -f raw ${BUILD_DIR}/floppy.img 1440k
mkfs.msdos -s 1 ${BUILD_DIR}/floppy.img
mkdir ${BUILD_DIR}/floppy
sudo mount ${BUILD_DIR}/floppy.img ${BUILD_DIR}/floppy
ssh-keygen -y -f $SSH_PRIVATE_KEY > ${BUILD_DIR}/id_rsa.pub
sudo cp \
    ${BUILD_DIR}/autounattend.xml \
    ${BUILD_DIR}/first-logon.ps1 \
    ${BUILD_DIR}/utils.ps1 \
    ${BUILD_DIR}/id_rsa.pub \
    ${BUILD_DIR}/floppy/
sudo umount ${BUILD_DIR}/floppy
rmdir ${BUILD_DIR}/floppy

echo "Starting libvirt VM"
qemu-img create -f qcow2 ${BUILD_DIR}/ceph-win-ltsc2019-ci-image.qcow2 50G
VM_NAME="ceph-win-ltsc2019"
sudo virt-install \
    --name $VM_NAME \
    --os-variant win2k19 \
    --boot hd,cdrom \
    --virt-type kvm \
    --graphics spice \
    --cpu host \
    --vcpus 4 \
    --memory 4096 \
    --disk ${BUILD_DIR}/floppy.img,device=floppy \
    --disk ${BUILD_DIR}/ceph-win-ltsc2019-ci-image.qcow2,bus=virtio \
    --disk ${BUILD_DIR}/windows-server-2019.iso,device=cdrom \
    --disk ${BUILD_DIR}/virtio-win.iso,device=cdrom \
    --network network=default,model=virtio \
    --controller type=virtio-serial \
    --channel unix,target_type=virtio,name=org.qemu.guest_agent.0 \
    --noautoconsol

# Find the VM NIC MAC address
sudo virsh dumpxml $VM_NAME > $WORKSPACE/libvirt_vm.xml
VM_NIC_MAC_ADDRESS=`xmllint --xpath 'string(/domain/devices/interface/mac/@address)' $WORKSPACE/libvirt_vm.xml`
rm $WORKSPACE/libvirt_vm.xml

export SSH_USER="administrator"
export SSH_KNOWN_HOSTS_FILE="${BUILD_DIR}/known_hosts"
export SSH_KEY="$SSH_PRIVATE_KEY"

SECONDS=0
TIMEOUT=1200
SLEEP_SECS=30
while true; do
    if [[ $SECONDS -gt $TIMEOUT ]]; then
        echo "Timeout waiting for the VM to start"
        exit 1
    fi
    # Get the VM NIC IP address from the "default" virsh network
    VM_IP=$(sudo virsh qemu-agent-command $VM_NAME '{"execute":"guest-network-get-interfaces"}' | jq -r ".return[] | select(.\"hardware-address\"==\"${VM_NIC_MAC_ADDRESS}\") | .\"ip-addresses\"[] | select(.\"ip-address\" | startswith(\"192.168.122.\")) | .\"ip-address\"") || {
        echo "Retrying in $SLEEP_SECS seconds"
        sleep $SLEEP_SECS
        continue
    }
    if [[ -z $VM_IP ]]; then
        echo "Cannot find the VM IP address. Retrying in $SLEEP_SECS seconds"
        sleep $SLEEP_SECS
        continue
    fi
    ssh-keyscan -H $VM_IP &> $SSH_KNOWN_HOSTS_FILE || {
        echo "SSH is not reachable yet"
        sleep $SLEEP_SECS
        continue
    }
    SSH_ADDRESS=$VM_IP ssh_exec hostname || {
        echo "Cannot execute SSH commands yet"
        sleep $SLEEP_SECS
        continue
    }
    break
done
export SSH_ADDRESS=$VM_IP

scp_upload ${BUILD_DIR}/install-windows-updates.ps1 /install-windows-updates.ps1
SSH_TIMEOUT=1h ssh_exec powershell.exe -File /install-windows-updates.ps1
ssh_exec powershell.exe Remove-Item -Force /install-windows-updates.ps1

restart_windows_vm 1800

scp_upload ${BUILD_DIR}/utils.ps1 /utils.ps1
scp_upload ${BUILD_DIR}/setup.ps1 /setup.ps1
SSH_TIMEOUT=1h ssh_exec powershell.exe -File /setup.ps1
ssh_exec powershell.exe Remove-Item -Force /setup.ps1, /utils.ps1

restart_windows_vm

sudo virsh qemu-agent-command $VM_NAME \
    '{"execute":"guest-exec", "arguments":{"path":"ipconfig.exe", "arg":["/release"]}}'
sudo virsh qemu-agent-command $VM_NAME \
    '{"execute":"guest-exec", "arguments":{"path":"C:\\Windows\\System32\\Sysprep\\Sysprep.exe", "arg":["/generalize", "/oobe", "/shutdown", "/quiet"]}}'

SECONDS=0
TIMEOUT=600
while true; do
    if [[ $SECONDS -gt $TIMEOUT ]]; then
        echo "Timeout waiting for the sysprep to shut down the VM"
        exit 1
    fi
    if sudo virsh list | grep -q " $VM_NAME "; then
        echo "Sysprep is still running"
        sleep 10
        continue
    fi
    echo "Sysprep finished"
    break
done

sudo mv "${BUILD_DIR}/ceph-win-ltsc2019-ci-image.qcow2" ${WORKSPACE}/

${BUILD_DIR}/cleanup

echo "Image successfully built at: ${WORKSPACE}/ceph-win-ltsc2019-ci-image.qcow2"

ssh-keyscan -H drop.front.sepia.ceph.com &>> $SSH_KNOWN_HOSTS_FILE

export SSH_USER="${FILEDUMP_USER}"
export SSH_KEY="${FILEDUMP_SSH_KEY}"
export SSH_ADDRESS="drop.front.sepia.ceph.com"
for FILE in ceph-win-ltsc2019-ci-image.qcow2 ceph-win-ltsc2019-ci-image.qcow2.sha256; do
    FILE_PATH="/ceph/filedump.ceph.com/windows/${FILE}"
    if ssh_exec test -f ${FILE_PATH}; then
        echo "Backup existing image file https://filedump.ceph.com/windows/${FILE}"
        ssh_exec sudo mv ${FILE_PATH} ${FILE_PATH}.old
    fi
done

echo "Uploading the image to https://filedump.ceph.com/windows/"
cd ${WORKSPACE}
sha256sum ceph-win-ltsc2019-ci-image.qcow2 > ceph-win-ltsc2019-ci-image.qcow2.sha256
rsync -azvP ceph-win-ltsc2019-ci-image.qcow2 ceph-win-ltsc2019-ci-image.qcow2.sha256 --rsync-path="sudo rsync" -e "ssh -i ${FILEDUMP_SSH_KEY} -o UserKnownHostsFile=${SSH_KNOWN_HOSTS_FILE}" ${FILEDUMP_USER}@drop.front.sepia.ceph.com:/ceph/filedump.ceph.com/windows/
