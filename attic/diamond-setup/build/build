#!/bin/bash -ex

## Get the basic setup/info
HOST=$(hostname --short)
echo "Building on ${HOST}"
echo "  DIST=${DIST}"
echo "  BPTAG=${BPTAG}"
echo "  WS=$WORKSPACE"
echo "  PWD=$(pwd)"
echo "  BRANCH=$BRANCH"
echo "  SHA1=$GIT_COMMIT"

if [ -x "$BRANCH" ] ; then
    echo "No git branch was supplied"
    exit 1
fi

echo "Building version $(git describe) Branch $BRANCH"

## Make sure the repo is clean
# Remove all untracked files
echo "Cleaning up the repo"
git clean -fxd

# Make sure the dist directory is clean
rm -rf dist
mkdir -p dist

## Install any setup-time deps
# We need this for mk-build-deps
sudo apt-get install equivs
# Run the install-deps.sh upstream script if it exists
if [ -x install-deps.sh ]; then
  echo "Ensuring dependencies are installed"
  ./install-deps.sh
fi

## Get the version
VERSION=$(./version.sh)

## Build the source tarball
echo "Building source distribution"
python setup.py sdist

## Prepare the spec file for build
sed -e "s/@VERSION@/${VERSION}/g" < diamond.spec.in > dist/diamond.spec

## Prepare the debian files
# Bump the changelog
dch -v "$VERSION" "New release ($VERSION)"

# Install build-time dependencies
yes | sudo mk-build-deps --install debian/control

# Create .dsc and source tarball
sudo dpkg-buildpackage -S -us -uc

cp ../diamond_$VERSION* dist/

## Save these so that we can later inject them into the build script
cat > dist/sha1 << EOF
SHA1=${GIT_COMMIT}
EOF

cat > dist/branch << EOF
BRANCH=${BRANCH}
EOF

cat > dist/version << EOF
VERSION=${VERSION}
EOF
