#! /usr/bin/bash
set -ex

# Only do actual work when we are an RPM distro
if test "$DISTRO" != "fedora" -a "$DISTRO" != "centos" -a "$DISTRO" != "rhel"; then
    exit 0
fi

get_rpm_dist

# Make sure old rpms are not leftover on the system
sudo yum remove -y librados2 librgw2 libcephfs2 librados-devel librgw-devel libcephfs-devel

# Make sure old repo metadata are not leftover on the system
sudo yum clean all

# Get .repo file from appropriate shaman build
REPO_URL="https://shaman.ceph.com/api/repos/ceph/$CEPH_BRANCH/$CEPH_SHA1/$DISTRO/$RELEASE/flavors/default/repo"
TIME_LIMIT=1200
INTERVAL=30
REPO_FOUND=0

# poll shaman for up to 10 minutes
while [ "$SECONDS" -le "$TIME_LIMIT" ]
do
  if `curl --fail -L $REPO_URL > $WORKSPACE/shaman.repo`; then
    echo "Ceph repo file has been added from shaman"
    REPO_FOUND=1
    break
  else
    sleep $INTERVAL
  fi
done

if [[ "$REPO_FOUND" -eq 0 ]]; then
  echo "Ceph lib repo does NOT exist in shaman"
  exit 1
fi

# add shaman repos to /etc/yum.repos.d/ to install ceph libraries so enable
#FSAL_CEPH (enabled by default) and FSAL_RGW in the .spec file when cmake command runs
sudo cp $WORKSPACE/shaman.repo /etc/yum.repos.d/
# for debugging
cat /etc/yum.repos.d/shaman.repo
xargs sudo yum install -y <<< "
dbus-devel
libacl-devel
libblkid-devel
libcap-devel
libnfsidmap-devel
libwbclient-devel
krb5-devel
librados-devel-${CEPH_VERSION}
librgw-devel-${CEPH_VERSION}
libcephfs-devel-${CEPH_VERSION}
lttng-ust-devel
"

# Removed "lttng-tools-devel" from above xargs list because it isn't available in el8
if [ $DIST = centos7 ]
then
	sudo yum install -y lttng-tools-devel
fi

# The libnsl2-devel package is needed on el8 builds, but not el7
if [ $DIST = centos8 ]
then
	sudo yum -y install libnsl2-devel
fi

sudo yum install -y mock

# Normalize variables across rpm/deb builds
NORMAL_DISTRO=$DISTRO
NORMAL_DISTRO_VERSION=$RELEASE
NORMAL_ARCH=$ARCH

# create build status in shaman
update_build_status "started" "nfs-ganesha-stable" $NORMAL_DISTRO $NORMAL_DISTRO_VERSION $NORMAL_ARCH

cd $WORKSPACE/nfs-ganesha

git submodule update --init || git submodule sync
echo "LS0tIGEvc3JjL0NNYWtlTGlzdHMudHh0CisrKyBiL3NyYy9DTWFrZUxpc3RzLnR4dApAQCAtMTAx
MywxMSArMTAxMywxNCBAQCBlbHNlIChVU0VfU1lTVEVNX05USVJQQykKICAgc2V0KFVTRV9HU1Mg
JHtVU0VfR1NTfSBDQUNIRSBCT09MICJVc2UgR1NTIikKICAgc2V0KENNQUtFX01PRFVMRV9QQVRI
ICR7Q01BS0VfTU9EVUxFX1BBVEh9CiAJICAiJHtDTUFLRV9TT1VSQ0VfRElSfS9saWJudGlycGMv
Y21ha2UvbW9kdWxlcy8iKQorICBzZXQoU0FWRV9MVFRORyAke1VTRV9MVFROR30pCisgIHNldChV
U0VfTFRUTkcgT0ZGKQogICBhZGRfc3ViZGlyZWN0b3J5KGxpYm50aXJwYykKICAgc2V0KE5USVJQ
Q19MSUJSQVJZIG50aXJwYykKICAgaWYgKFVTRV9MVFRORykKICAgICBzZXQoTlRJUlBDX0xJQlJB
UlkgJHtOVElSUENfTElCUkFSWX0gbnRpcnBjX2x0dG5nKQogICBlbmRpZiAoVVNFX0xUVE5HKQor
ICBzZXQoVVNFX0xUVE5HICR7U0FWRV9MVFROR30pCiAgIHNldChOVElSUENfSU5DTFVERV9ESVIg
IiR7UFJPSkVDVF9TT1VSQ0VfRElSfS9saWJudGlycGMvbnRpcnBjLyIpCiAgIG1lc3NhZ2UoU1RB
VFVTICJVc2luZyBudGlycGMgc3VibW9kdWxlIikKIGVuZGlmIChVU0VfU1lTVEVNX05USVJQQykK"| base64 -d > lttng-fix.patch

patch -p1 < lttng-fix.patch

mkdir build
cd build

# generate .spec file, edit .spec file for correct versions of libs and make source tarball
if [ $DIST = centos7 ]
then
    cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSTRICT_PACKAGE=ON -DUSE_FSAL_ZFS=OFF -DUSE_FSAL_GLUSTER=OFF -DUSE_FSAL_CEPH=ON -DUSE_FSAL_RGW=ON -DRADOS_URLS=ON -DUSE_RADOS_RECOV=ON -DUSE_LTTNG=ON -DUSE_ADMIN_TOOLS=ON $WORKSPACE/nfs-ganesha/src && make dist || exit 1
else
    # Don't enable LTTNG for el8 builds - the "lttng-tools-devel" package isn't available
    cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSTRICT_PACKAGE=ON -DUSE_FSAL_ZFS=OFF -DUSE_FSAL_GLUSTER=OFF -DUSE_FSAL_CEPH=ON -DUSE_FSAL_RGW=ON -DRADOS_URLS=ON -DUSE_RADOS_RECOV=ON -DUSE_ADMIN_TOOLS=ON $WORKSPACE/nfs-ganesha/src && make dist || exit 1
fi

sed -i 's/libcephfs1-devel/libcephfs-devel/' $WORKSPACE/nfs-ganesha/src/nfs-ganesha.spec
sed -i 's/librgw2-devel/librgw-devel/' $WORKSPACE/nfs-ganesha/src/nfs-ganesha.spec
sed -i 's/CMAKE_BUILD_TYPE=Debug/CMAKE_BUILD_TYPE=RelWithDebInfo/' $WORKSPACE/nfs-ganesha/src/nfs-ganesha.spec

## Create the source rpm
echo "Building SRPM"
rpmbuild \
    --define "_sourcedir ." \
    --define "_specdir $WORKSPACE/dist" \
    --define "_builddir $WORKSPACE/dist" \
    --define "_srcrpmdir $WORKSPACE/dist/SRPMS" \
    --define "_rpmdir $WORKSPACE/dist/RPMS" \
    --nodeps -bs $WORKSPACE/nfs-ganesha/src/nfs-ganesha.spec
SRPM=$(readlink -f $WORKSPACE/dist/SRPMS/*.src.rpm)

# Add repo file to mock config. The new version of mock uses templates.
if [ $DIST = centos7 ]
then
    sudo cat /etc/mock/${MOCK_TARGET}-${RELEASE}-${ARCH}.cfg /etc/mock/templates/epel-${RELEASE}.tpl  > nfs-ganesha-mock.temp
else
    sudo cat /etc/mock/${MOCK_TARGET}-${RELEASE}-${ARCH}.cfg /etc/mock/templates/centos-${RELEASE}.tpl /etc/mock/templates/epel-${RELEASE}.tpl  > nfs-ganesha-mock.temp
fi
sudo head -n -1 nfs-ganesha-mock.temp > nfs-ganesha.cfg
sudo cat $WORKSPACE/shaman.repo >> nfs-ganesha.cfg
sudo echo "\"\"\"" >> nfs-ganesha.cfg
# for debugging
cat nfs-ganesha.cfg

## Build the binaries with mock
echo "Building RPMs"
sudo mock --verbose -r nfs-ganesha.cfg --scrub=all
sudo mock --verbose -r nfs-ganesha.cfg --define "dist .el${RELEASE}" --resultdir=$WORKSPACE/dist/RPMS/ ${SRPM} || ( tail -n +1 $WORKSPACE/dist/RPMS/{root,build}.log && exit 1 )

VERSION=`grep -R "#define GANESHA_VERSION \"" $WORKSPACE/nfs-ganesha/build/include/config.h | sed -e 's/#define GANESHA_VERSION "//1; s/"//1;'`
chacra_endpoint="nfs-ganesha-stable/${NFS_GANESHA_BRANCH}/${GIT_COMMIT}/${DISTRO}/${RELEASE}"
chacra_repo_endpoint="${chacra_endpoint}/flavors/${FLAVOR}"
RPM_RELEASE=`grep Release $WORKSPACE/nfs-ganesha/src/nfs-ganesha.spec | sed 's/Release:[ \t]*//g' | cut -d '%' -f 1`
RPM_VERSION=`grep Version $WORKSPACE/nfs-ganesha/src/nfs-ganesha.spec | sed 's/Version:[ \t]*//g'`
PACKAGE_MANAGER_VERSION="$RPM_VERSION-$RPM_RELEASE"

# check to make sure nfs-ganesha-ceph package built
if [ ! -f $WORKSPACE/dist/RPMS/nfs-ganesha-ceph-*.rpm ]; then
    echo "nfs-ganesha-ceph rpm not built!"
    exit 1
fi

# check to make sure nfs-ganesha-rgw package built
if [ ! -f $WORKSPACE/dist/RPMS/nfs-ganesha-rgw-*.rpm ]; then
    echo "nfs-ganesha-rgw rpm not built!"
    exit 1
fi

[ "$FORCE" = true ] && chacra_flags="--force" || chacra_flags=""

if [ "$THROWAWAY" = false ] ; then
    # push binaries to chacra
    find $WORKSPACE/dist/SRPMS | grep rpm | $VENV/chacractl binary ${chacra_flags} create ${chacra_endpoint}/source/flavors/${FLAVOR}
    find $WORKSPACE/dist/RPMS/ | grep rpm | $VENV/chacractl binary ${chacra_flags} create ${chacra_endpoint}/${ARCH}/flavors/${FLAVOR}
    # write json file with build info
    # version and package_manager version are needed for teuthology
    cat > $WORKSPACE/repo-extra.json << EOF
{
    "version":"$VERSION",
    "package_manager_version":"$PACKAGE_MANAGER_VERSION",
    "build_url":"$BUILD_URL",
    "root_build_cause":"$ROOT_BUILD_CAUSE",
    "node_name":"$NODE_NAME",
    "job_name":"$JOB_NAME"
}
EOF
    # post the json to repo-extra json to chacra
    curl -X POST -H "Content-Type:application/json" --data "@$WORKSPACE/repo-extra.json" -u $CHACRACTL_USER:$CHACRACTL_KEY ${chacra_url}repos/${chacra_repo_endpoint}/extra/
    # start repo creation
    $VENV/chacractl repo update ${chacra_repo_endpoint}
fi

echo "Check the status of the repo at: https://shaman.ceph.com/api/repos/${chacra_repo_endpoint}"

# update shaman with the completed build status
SHA1=${GIT_COMMIT}
update_build_status "completed" "nfs-ganesha-stable" $NORMAL_DISTRO $NORMAL_DISTRO_VERSION $NORMAL_ARCH

sudo rm -rf $WORKSPACE/dist
sudo rm -f /etc/yum.repos.d/shaman*
sudo rm -f /etc/apt/sources.list.d/shaman*
