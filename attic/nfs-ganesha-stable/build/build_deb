#! /usr/bin/bash
set -ex

# Only do actual work when we are a DEB distro
if test "$DISTRO" != "debian" -a "$DISTRO" != "ubuntu"; then
    exit 0
fi


cd $WORKSPACE/ntirpc
NTIRPC_VERSION=`git describe --long | sed -e 's/v//1;'`

rm -rf .git

cd $WORKSPACE

## Build the source tarball
NTIRPC_ORIG_TAR_GZ="libntirpc_${NTIRPC_VERSION}.orig.tar.gz"
tar czf ${NTIRPC_ORIG_TAR_GZ} ntirpc

cd $WORKSPACE/nfs-ganesha-debian
git checkout ${NTIRPC_DEBIAN_BRANCH}
cd $WORKSPACE/ntirpc

# add debian directory next to src
cp -r $WORKSPACE/nfs-ganesha-debian/debian $WORKSPACE/ntirpc/

## Prepare the debian files
# Bump the changelog
dch -v "$NTIRPC_VERSION-1${DIST}" "$NTIRPC_VERSION for download.ceph.com"

# Create .dsc and source tarball, we don't care about signing changes or source package
sudo dpkg-buildpackage -S -us -uc -d

## Setup the pbuilder
setup_pbuilder use_gcc
PBUILDDIR="/srv/debian-base"

## Build with pbuilder
echo "Building ntirpc debs"

sudo pbuilder --clean \
    --distribution $DIST \
    --basetgz $PBUILDDIR/$DIST.tgz

# add missing packages and components to pbuilder
sudo pbuilder update \
    --distribution $DIST \
    --basetgz $PBUILDDIR/$DIST.tgz \
    --extrapackages "cmake libkrb5-dev libjemalloc-dev debhelper apt-transport-https apt-utils ca-certificates" \
    --components "main restricted universe multiverse" \
    --override-config

sudo pbuilder build \
    --distribution $DIST \
    --basetgz $PBUILDDIR/$DIST.tgz \
    --buildresult $WORKSPACE/dist/ntirpc/deb/ \
    $WORKSPACE/libntirpc_${NTIRPC_VERSION}-1${DIST}.dsc

sudo chown -R jenkins-build:jenkins-build $WORKSPACE/dist/ntirpc/deb
cd $WORKSPACE/dist/ntirpc/deb
apt-ftparchive packages . > Packages

# for debugging
cat Packages

cd $WORKSPACE

REPO_URL="https://shaman.ceph.com/api/repos/ceph/$CEPH_BRANCH/$CEPH_SHA1/$DISTRO/$DIST/repo"
TIME_LIMIT=1200
INTERVAL=30
REPO_FOUND=0

# poll shaman for up to 10 minutes
while [ "$SECONDS" -le "$TIME_LIMIT" ]
do
  SHAMAN_MIRROR=`curl --fail -L ${REPO_URL} || true`
  if [[ ${SHAMAN_MIRROR} ]]; then
    echo "Ceph debian lib repo exists in shaman"
    REPO_FOUND=1
    break
  else
    sleep $INTERVAL
  fi
done

if [[ "$REPO_FOUND" -eq 0 ]]; then
  echo "Ceph debian lib repo does NOT exist in shaman"
  exit 1
fi

# make sure any shaman list file is removed. At some point if all nodes
# are clean this will not be needed.
sudo rm -f /etc/apt/sources.list.d/shaman*

# We need this for system and to run the cmake
sudo apt-get update

# Normalize variables across rpm/deb builds
NORMAL_DISTRO=$DISTRO
NORMAL_DISTRO_VERSION=$DIST
NORMAL_ARCH=$ARCH

# create build status in shaman
update_build_status "started" "nfs-ganesha-stable" $NORMAL_DISTRO $NORMAL_DISTRO_VERSION $NORMAL_ARCH

cd $WORKSPACE/nfs-ganesha-debian
git checkout ${NFS_GANESHA_DEBIAN_BRANCH}

cd $WORKSPACE/nfs-ganesha

PACKAGE_MANAGER_VERSION="`git describe --long | sed 's/V//1'`-1${DIST}"

# Version is in format X.XdevX-X-SHA1
VERSION=`git describe --long | sed -e 's/V//1'`

rm -rf .git

cd $WORKSPACE

## Build the source tarball
NFS_GANESHA_ORIG_TAR_GZ="nfs-ganesha_${VERSION}.orig.tar.gz"
tar czf ${NFS_GANESHA_ORIG_TAR_GZ} nfs-ganesha/src

# remove old version
rm -rf $WORKSPACE/nfs-ganesha

# unpack just the src
tar xzf ${NFS_GANESHA_ORIG_TAR_GZ}

cd $WORKSPACE/nfs-ganesha

# add debian directory next to src
cp -r $WORKSPACE/nfs-ganesha-debian/debian $WORKSPACE/nfs-ganesha/

## Get some basic information about the system and the repository
DEB_ARCH=$(dpkg-architecture -qDEB_BUILD_ARCH)

## Prepare the debian files
# Bump the changelog
dch -v "$VERSION-1${DIST}" "$VERSION for download.ceph.com"

# Create .dsc and source tarball, we don't care about signing changes or source package
sudo dpkg-buildpackage -S -us -uc -d

## Build with pbuilder
echo "Building nfs-ganesha debs"

sudo pbuilder --clean \
    --distribution $DIST \
    --basetgz $PBUILDDIR/$DIST.tgz

mkdir -p $WORKSPACE/dist/deb

# add missing packages and components to pbuilder
sudo pbuilder update \
    --distribution $DIST \
    --basetgz $PBUILDDIR/$DIST.tgz \
    --extrapackages "apt-transport-https apt-utils ca-certificates debhelper python-all liblttng-ust0 liblttng-ust-dev liblttng-ctl-dev pkgconf quilt" \
    --components "main restricted universe multiverse" \
    --override-config

sudo pbuilder update \
    --distribution $DIST \
    --basetgz $PBUILDDIR/$DIST.tgz \
    --removepackages "librados2 libcephfs2 librgw2 librados-dev libcephfs-dev librgw-dev libntirpc-dev" \
    --override-config

sudo pbuilder update \
    --distribution $DIST \
    --basetgz $PBUILDDIR/$DIST.tgz \
    --extrapackages "libntirpc-dev" \
    --othermirror "deb [trusted=yes] file://$WORKSPACE/dist/ntirpc/deb ./" \
    --bindmounts "$WORKSPACE/dist/ntirpc/deb" \
    --override-config

# use libcephfs and librgw from shaman
sudo pbuilder update \
    --distribution $DIST \
    --basetgz $PBUILDDIR/$DIST.tgz \
    --extrapackages "librados2 libcephfs2 librgw2 librados-dev libcephfs-dev librgw-dev" \
    --othermirror "${SHAMAN_MIRROR}" \
    --override-config

echo "Building debs for $DIST"
sudo pbuilder build \
    --distribution $DIST \
    --basetgz $PBUILDDIR/$DIST.tgz \
    --buildresult $WORKSPACE/dist/nfs-ganesha/deb/ \
    --debbuildopts "-j`grep -c processor /proc/cpuinfo`" \
    $WORKSPACE/nfs-ganesha_${VERSION}-1${DIST}.dsc


## Upload the created debs to chacra
chacra_endpoint="nfs-ganesha-stable/${NFS_GANESHA_BRANCH}/${GIT_COMMIT}/${DISTRO}/${DIST}"
chacra_repo_endpoint="${chacra_endpoint}/flavors/${FLAVOR}"

[ "$FORCE" = true ] && chacra_flags="--force" || chacra_flags=""

# push binaries to chacra

if [ "$THROWAWAY" = false ] ; then
    # push binaries to chacra
    find $WORKSPACE/dist/nfs-ganesha/deb | egrep "*\.(changes|deb|dsc|gz)$" | egrep -v "(Packages|Sources|Contents)" | $VENV/chacractl binary ${chacra_flags} create ${chacra_endpoint}/${ARCH}/flavors/${FLAVOR}
    find $WORKSPACE/dist/ntirpc/deb | egrep "*\.(changes|deb|dsc|gz)$" | egrep -v "(Packages|Sources|Contents)" | $VENV/chacractl binary ${chacra_flags} create ${chacra_endpoint}/${ARCH}/flavors/${FLAVOR}
    # write json file with build info
    # version and package_manager version are needed for teuthology
    cat > $WORKSPACE/repo-extra.json << EOF
{
    "version":"$VERSION",
    "package_manager_version":"$PACKAGE_MANAGER_VERSION",
    "build_url":"$BUILD_URL",
    "root_build_cause":"$ROOT_BUILD_CAUSE",
    "node_name":"$NODE_NAME",
    "job_name":"$JOB_NAME"
}
EOF
    # post the json to repo-extra json to chacra
    curl -X POST -H "Content-Type:application/json" --data "@$WORKSPACE/repo-extra.json" -u $CHACRACTL_USER:$CHACRACTL_KEY ${chacra_url}repos/${chacra_repo_endpoint}/extra/
    # start repo creation
    $VENV/chacractl repo update ${chacra_repo_endpoint}
fi

echo "Check the status of the repo at: https://shaman.ceph.com/api/repos/${chacra_repo_endpoint}"

# update shaman with the completed build status
SHA1=${GIT_COMMIT}
update_build_status "completed" "nfs-ganesha-stable" $NORMAL_DISTRO $NORMAL_DISTRO_VERSION $NORMAL_ARCH

sudo rm -rf $WORKSPACE/dist

# this job adds custom shaman repositories which can cause issues at build time
# for other jobs so they need to be properly removed
sudo rm -f /etc/yum.repos.d/shaman*
sudo rm -f /etc/apt/sources.list.d/shaman*
